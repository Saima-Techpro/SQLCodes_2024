--------------- Day 09 -----------------

------------ ALTER TABLE ---------------

-- ALTER TABLE is the keyword that we use to update / change structure of the table. (DDL)
-- ADD COLUMN => to add new column on the existing table
-- DROP COLUMN => to drop a column from the existing table
-- RENAME COLUMN => change the name of the the existing column
-- RENAME ... TO => change the name of the existing table
-- ALTER COLUMN => to change data type, size etc. for existing column


-- Add a new column 'age' with INT data type to company_employees table.
ALTER TABLE company_employees
ADD COLUMN age INT;


-- Add a new column 'remote' with boolean data type to company_employees table.
ALTER TABLE company_employees
ADD COLUMN remote BOOLEAN default true;

-- Add a new column 'country' with VARCHAR data type and set the default value as 'US'.


ALTER TABLE company_employees
ADD COLUMN country VARCHAR (5) DEFAULT 'US';


-- Drop the age column

ALTER TABLE company_employees
DROP COLUMN age;


-- Change the name of the column 'salary' to 'income'
ALTER TABLE company_employees
RENAME COLUMN salary TO income;

-- Change the data type of 'income' from SMALLINT to REAL

ALTER TABLE company_employees
ALTER COLUMN income TYPE REAL;

-- Can we change it back to SMALLINT => YES
-- ALTER TABLE company_employees
-- ALTER COLUMN income TYPE SMALLINT;

-- Change the data type of 'income' from REAL to VARCHAR

ALTER TABLE company_employees
ALTER COLUMN income TYPE VARCHAR;



-- Change the data type of 'income' from VARCHAR back to REAL
ALTER TABLE company_employees
ALTER COLUMN income TYPE REAL; -- error => column "income" cannot be cast automatically to type real so we need to use type casting => "USING income::real"


ALTER TABLE company_employees
ALTER COLUMN income TYPE REAL USING income::real; -- No error now


-- Change the name of the table itself

ALTER TABLE company_employees
RENAME TO remote_employees;


SELECT * FROM company_employees; -- this name doesn't exist anymore

SELECT * FROM remote_employees;


---------------------------------------------
CREATE TABLE random (
	id VARCHAR (10),
	name VARCHAR (20),
	salary INT,
	address VARCHAR (60)

);

INSERT INTO random VALUES ('3', 'Tom', 9000, '23R, FL, US');
INSERT INTO random VALUES ('8', 'Ali', 8800, '65B, TX, US');
INSERT INTO random VALUES ('24', 'John', 9900, '21M, AZ, US');


-- Change the data type of salary to REAL

ALTER TABLE random
ALTER COLUMN salary TYPE REAL;


-- Change the data type of address to int

ALTER TABLE random
ALTER COLUMN address TYPE INT USING address::integer; -- still shows error even though we insist on the change by using type casting


SELECT * FROM random;


-----------------------------------------------

CREATE TABLE it_employees (
  id CHAR(9),
  name VARCHAR (30),
  state VARCHAR (20),
  company VARCHAR (20),
  number_of_employees numeric (5)

);


INSERT INTO it_employees VALUES(123456789, 'John Walker', 'Florida', 'IBM', 34500);
INSERT INTO it_employees VALUES(456789012, 'Veli Han', 'Arizona', 'GOOGLE', 90000);
INSERT INTO it_employees VALUES(234567890, 'Brad Pitt', 'Florida', 'APPLE', 45500);
INSERT INTO it_employees VALUES(345678901, 'Eddie Murphy', 'Texas', 'IBM', 23700);
INSERT INTO it_employees VALUES(567890123, 'Yusuf Arturk', 'Washington', 'APPLE', 45500);
INSERT INTO it_employees VALUES(589670123, 'Tuba Omar', 'Texas', 'MICROSOFT', 60000);
INSERT INTO it_employees VALUES(476589012, 'Brad Pitt', 'Texas', 'GOOGLE', 90000);
INSERT INTO it_employees VALUES(623456710, 'Mark Stone', 'Pennsylvania', 'IBM', 23700);
INSERT INTO it_employees VALUES(123456710, 'Ali Can', 'Pennsylvania', 'IBM', 25700);


SELECT * FROM it_employees;


-- Add a column name_of_ceo with VARCHAR data type to it_employees table.
ALTER TABLE it_employees
ADD COLUMN name_of_ceo VARCHAR (30);


-- Add the constraint 'NOT NULL'
ALTER TABLE it_employees
ALTER COLUMN name_of_ceo SET NOT NULL; -- Error => the column already has null values

-- TWO OPTIONS:
-- 1. Add the names of the ceo one by one, then run the above query and set NOT NULL for the 10th onwards values

UPDATE it_employees
SET name_of_ceo = 'Abdulkadir'
WHERE company ILIKE 'google'; -- ILIKE means ignore upper/lower case

-- 2. DROP the column, add new column with the constraint  or drop the whole table

DROP TABLE it_employees;

-- Create it again

CREATE TABLE it_employees (
  id CHAR(9),
  name VARCHAR (30),
  state VARCHAR (20),
  company VARCHAR (20),
  number_of_employees numeric (5)

);


-- Add a column name_of_ceo with VARCHAR data type to it_employees table.
ALTER TABLE it_employees
ADD COLUMN name_of_ceo VARCHAR (30);


-- Add the constraint 'NOT NULL'
ALTER TABLE it_employees
ALTER COLUMN name_of_ceo SET NOT NULL; -- NO Error


-- Now this table will not accept row data without the name of the ceo



INSERT INTO it_employees VALUES(123456789, 'John Walker', 'Florida', 'IBM', 34500, 'Arvind Krishna');
INSERT INTO it_employees VALUES(456789012, 'Veli Han', 'Arizona', 'GOOGLE', 90000, 'Sundar Pichai');
INSERT INTO it_employees VALUES(234567890, 'Brad Pitt', 'Florida', 'APPLE', 45500, 'Tim Cook');
INSERT INTO it_employees VALUES(345678901, 'Eddie Murphy', 'Texas', 'IBM', 23700, 'Arvind Krishna');
INSERT INTO it_employees VALUES(567890123, 'Yusuf Arturk', 'Washington', 'APPLE', 45500, 'Tim Cook');
INSERT INTO it_employees VALUES(589670123, 'Tuba Omar', 'Texas', 'MICROSOFT', 60000, 'Satya Nadella');
INSERT INTO it_employees VALUES(476589012, 'Brad Pitt', 'Texas', 'GOOGLE', 90000, 'Sundar Pichai');
INSERT INTO it_employees VALUES(623456710, 'Mark Stone', 'Pennsylvania', 'IBM', 23700, 'Arvind Krishna');
INSERT INTO it_employees VALUES(123456710, 'Ali Can', 'Pennsylvania', 'IBM', 25700, 'Arvind Krishna');


-- Add constraint NOT NULL to number_of_employees

ALTER TABLE it_employees
ALTER COLUMN number_of_employees SET NOT NULL;  -- NO issue because all cells have data already, none is empty so setting this constraint is not going to cause any harm to the data


-- Add a new value to check if the CONSTRAINT is implemented or not

INSERT INTO it_employees (company) VALUES ('ORACLE'); -- NOT ADDED => number_of_employees column has NOT NULL constraint


INSERT INTO it_employees (company, number_of_employees) VALUES ('ORACLE' , 40000);-- NOT ADDED => name_of_ceo column has not-null constraint


INSERT INTO it_employees (company, number_of_employees, name_of_ceo) VALUES ('ORACLE' , 40000, 'Safra Ada Catz');

-- Add UNIQUE constraint to id field
ALTER TABLE it_employees
ADD CONSTRAINT id_unique UNIQUE (id);

-- Add value to null id

UPDATE it_employees
SET id = '123456789'
-- WHERE id IS NULL
WHERE company ILIKE 'oracLE';  -- not added because of UNIQUE CONSTRAINT



UPDATE it_employees
SET id = '167823459' -- id has to be unique
WHERE company ILIKE 'oracLE';




SELECT * FROM it_employees;


-----------------------------------------

-- Add a column employee_address with VARCHAR data type and size of 5

ALTER TABLE it_employees
ADD COLUMN employee_address VARCHAR (5);

-- Add a value / data

INSERT INTO it_employees (company, number_of_employees, name_of_ceo, employee_address) VALUES ('TechPro' , 20000, 'Mr Suleyman', 'USA');


-- Change the size to 10 (size means the number of maximum characters allowed)
ALTER TABLE it_employees
ALTER COLUMN employee_address TYPE VARCHAR (10);


INSERT INTO it_employees (company, number_of_employees, name_of_ceo, employee_address) VALUES ('Bouka Transport' , 10000, 'Mr Boukadida', 'Turkiye');


--Change the size back to 5

ALTER TABLE it_employees
ALTER COLUMN employee_address TYPE VARCHAR (5); -- error => the data longer than 5 characters already exists in this field so can't reduce the size

SELECT * FROM it_employees;

----------------------------------------------------

CREATE TABLE IF NOT EXISTS tourists (
  id CHAR(9),
  name VARCHAR (30),
  state VARCHAR (20),
  company VARCHAR (20),
  number_of_employees numeric (5)

);


DROP TABLE  IF EXISTS tourists;


-------------------------- JOINS --------------------------
-- JOINS are used to join/combine data from two or more TABLES
-- They're always used with ON statement

-- INNER JOIN: it returns common data from two tables according to the given filter
-- LEFT JOIN: it returns ALL values from first table AND common values according to the given filter
-- RIGHT JOIN: it returns ALL values from second table AND common values according to the given filter
-- FULL JOIN: it returns ALL values from BOTH tables according to the given filter
-- SELF JOIN: it works with SINGLE table, it works with it SELF, and returns data according to the given filter



CREATE TABLE my_companies(
  company_id CHAR(3),
  company_name VARCHAR(20)
);

INSERT INTO my_companies VALUES(100, 'IBM');
INSERT INTO my_companies VALUES(101, 'GOOGLE');
INSERT INTO my_companies VALUES(102, 'MICROSOFT');
INSERT INTO my_companies VALUES(103, 'APPLE');



CREATE TABLE orders(
  company_id CHAR(3),
  order_id CHAR(3),
  order_date DATE
);

INSERT INTO orders VALUES(101, 11, '17-Apr-2024');
INSERT INTO orders VALUES(102, 22, '25-Nov-2024');
INSERT INTO orders VALUES(103, 33, '19-Jan-2024');
INSERT INTO orders VALUES(104, 44, '20-Aug-2024');
INSERT INTO orders VALUES(105, 55, '21-Oct-2024');



-- Find the company name, order date, order id for the company that exists in both tables



--------- INNER JOIN -------------
SELECT company_name, my_companies.company_id, order_date
FROM my_companies INNER JOIN orders
ON my_companies.company_id = orders.company_id;

-- with ALIAS

SELECT company_name, mc.company_id, order_date
FROM my_companies mc INNER JOIN orders o
ON mc.company_id = o.company_id;


--------- LEFT JOIN -------------
SELECT company_name, my_companies.company_id, order_date
FROM my_companies LEFT JOIN orders
ON my_companies.company_id = orders.company_id;




--------- RIGHT JOIN -------------
SELECT company_name, my_companies.company_id, order_date
FROM my_companies RIGHT JOIN orders
ON my_companies.company_id = orders.company_id;


-- the ORDER of the tables MATTERS (it is IMPORTANT!!!!!)

SELECT company_name, my_companies.company_id, order_date
FROM orders RIGHT JOIN my_companies
ON my_companies.company_id = orders.company_id;


--------- FULL JOIN -------------
SELECT company_name, my_companies.company_id, order_date
FROM my_companies FULL JOIN orders
ON my_companies.company_id = orders.company_id;



SELECT * FROM my_companies;

SELECT * FROM orders;


--------- SELF JOIN -------------

CREATE TABLE jobs(
  id CHAR(2),
  name VARCHAR(20),
  title VARCHAR(40),
  manager_id CHAR(2)
);

INSERT INTO jobs VALUES(1, 'Ali Can', 'SDET', 2);
INSERT INTO jobs VALUES(2, 'John Walker', 'QA', 3);
INSERT INTO jobs VALUES(3, 'Angie Star', 'QA Lead', 4);
INSERT INTO jobs VALUES(4, 'Amy Sky', 'CEO', 5);



SELECT * FROM jobs;

-- Find the name of the manager of each employee

SELECT j2.name , j1.name
FROM jobs j1 SELF JOIN jobs j2 -- error => SELF JOIN keyword is not accepted in PostgreSQL.
ON j1.id = j2.manager_id;


-- PostgreSQL takes INNER JOIN in place of SELF JOIN

SELECT j2.name  AS name_of_employee, j1.name AS name_of_manager
FROM jobs j1 INNER JOIN jobs j2
ON j1.id = j2.manager_id;


-- For further practice

-- https://sqlbolt.com/
-- https://medium.com/@rupa.mahanti0/10-free-websites-to-learn-and-practice-sql-ca0711278378
