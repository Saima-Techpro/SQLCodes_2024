--------------- Day 05 ----------------

------------- INTERVIEW QUESTIONS ----------------

-- How to get the 3rd HIGHEST salary

SELECT MAX (worker_salary) AS third_highest_salary
FROM workers
WHERE worker_salary < (SELECT MAX(worker_salary)
					   FROM workers
					   WHERE worker_salary <(SELECT MAX(worker_salary)FROM workers));


-- How to get the 3rd LOWEST salary
SELECT MIN (worker_salary) AS third_lowest_salary
FROM workers
WHERE worker_salary >(SELECT MIN(worker_salary)
					  FROM workers
					  WHERE worker_salary >(SELECT MIN(worker_salary)FROM workers));



-- Wow to get the record of the person who is earning 3rd LOWEST salary


SELECT worker_id, worker_name
FROM workers
WHERE worker_salary  = (SELECT MIN (worker_salary) AS third_lowest_salary
						FROM workers
						WHERE worker_salary >(SELECT MIN(worker_salary)
					    FROM workers
					    WHERE worker_salary >(SELECT MIN(worker_salary)FROM workers)));

-- OR

SELECT *
FROM workers
WHERE worker_salary  = (SELECT MIN (worker_salary) AS third_lowest_salary
						FROM workers
						WHERE worker_salary >(SELECT MIN(worker_salary)
					    FROM workers
					    WHERE worker_salary >(SELECT MIN(worker_salary)FROM workers)));



SELECT * FROM workers;


-------------------- ORDER BY CLAUSE --------------
-- Is used to sort the data according to the column_name that is mentioned after ORDER BY keyword


SELECT *
FROM workers
ORDER BY worker_id;  -- by default, data is sorted in ASCENDING ORDER

-- The highest salary using ORDER BY

SELECT *
FROM workers
ORDER BY worker_salary DESC-- using DESC keyword, we can sort the data in DESCENDING ORDER
FETCH NEXT 1 ROW ONLY;

-- The second HIGHEST salary

SELECT *
FROM workers
ORDER BY worker_salary DESC
OFFSET 1 ROW   -- offset kere means skip => offset 1 row means skip 1 row
FETCH NEXT 1 ROW ONLY;

-- The third HIGHEST salary

SELECT *
FROM workers
ORDER BY worker_salary DESC
OFFSET 2 ROW
FETCH NEXT 1 ROW ONLY;


SELECT *
FROM workers
ORDER BY worker_salary DESC
LIMIT 1 OFFSET 2;  -- works the same as above but in shorter version


SELECT * FROM workers;

/*
-------------- NOTES ------------
-- Subquery is a universal language.
-- ORDER BY - OFFSET  is most commonly used in MySQL, PostgreSQL, Oracle. It is NOT universal.
-- ORDER BY sorts the data in ASCENDING Order by default. If we want to change the order to Descending,
             we must add DESC keyword.
-- If the datatype is STRING, by default, it's ordered in Alphabetical (Natural) order.

*/


CREATE TABLE customers_products (
  product_id INT,
  customer_name VARCHAR(30),
  product_name VARCHAR(30)
);

INSERT INTO customers_products VALUES (10, 'Mark Twain', 'Orange');
INSERT INTO customers_products VALUES (10, 'Mark Wilson', 'Mango');
INSERT INTO customers_products VALUES (20, 'John Clark', 'Apple');
INSERT INTO customers_products VALUES (30, 'Amy Williams', 'Plum');
INSERT INTO customers_products VALUES (20, 'Mark Donne', 'Apple');
INSERT INTO customers_products VALUES (10, 'Adam Smith', 'Orange');
INSERT INTO customers_products VALUES (40, 'John Evans', 'Apricot');
INSERT INTO customers_products VALUES (20, 'Eddie Murphy', 'Apple');
INSERT INTO customers_products VALUES (30, 'Anna Goldman', 'Mango');
INSERT INTO customers_products VALUES (50, 'Helen Green', 'Grapes');
INSERT INTO customers_products VALUES (10, 'Laura Owen', 'PineApple');



SELECT * FROM customers_products;


-------------- IN and NOT IN Operators --------------

-- Find the records that has the product_name 'Apple', 'Orange', 'Mango'

-- 1st way: NOT RECOMMENDED
SELECT *
FROM customers_products
WHERE product_name = 'Apple' OR product_name = 'Orange' OR product_name = 'Mango';

-- 2nd way: RECOMMENDED

SELECT *
FROM customers_products
WHERE product_name IN ('Apple', 'Orange', 'Mango');

-------- NOT IN --------
-- Find the records that does not have 'Orange', 'Plum', 'Apricot' as their product_name

-- 1st way: NOT RECOMMENDED
SELECT *
FROM customers_products
WHERE product_name <> 'Orange' AND product_name <> 'Plum' AND product_name <> 'Apricot';

-- 2nd way: RECOMMENDED

SELECT *
FROM customers_products
WHERE product_name NOT IN ('Orange', 'Plum', 'Apricot');

-------------BETWEEN and NOT BETWEEN Operators ------------

-- BETWEEN => inclusive ... beginning and ending boundary values are included
-- NOT BETWEEN => exclusive.. beginning and ending boundary values are NOT included

-- Find the product_names where product_id is greater than or equal to 20  and less than or equal 50

-- 1st way:
SELECT *
FROM customers_products
WHERE product_id >=20 AND product_id <=50;

-- 2nd way:
SELECT *
FROM customers_products
WHERE product_id BETWEEN 20 AND 50;

-- Find the records whose product_id is less than 20 and greater than 40

SELECT *
FROM customers_products
WHERE product_id NOT BETWEEN 20 AND 40; -- boundary values are exclusive

SELECT * FROM customers_products;


-------------------- EXISTS Operator ------------------

-- It's a bit tricky!!!! So be careful while using it

CREATE TABLE customers_likes(
  product_id CHAR(10),
  customer_name VARCHAR(50),
  liked_product VARCHAR(50)
);

INSERT INTO customers_likes VALUES (10, 'Mark', 'Orange');
INSERT INTO customers_likes VALUES (50, 'Mark', 'Pineapple');
INSERT INTO customers_likes VALUES (60, 'John', 'Avocado');
INSERT INTO customers_likes VALUES (30, 'Lary', 'Cherries');
INSERT INTO customers_likes VALUES (20, 'Mark', 'Apple');
INSERT INTO customers_likes VALUES (10, 'Adem', 'Orange');
INSERT INTO customers_likes VALUES (40, 'John', 'Apricot');
INSERT INTO customers_likes VALUES (20, 'Eddie', 'Apple');

SELECT * FROM customers_likes;


-- Update all customer_name to 'No name' if the field has a name 'Hary'
-- 1st way:
UPDATE customers_likes
SET customer_name = 'No name'
WHERE customer_name = 'Hary';  -- nothing changed because 'Hary' doesn't exist in our database

-- 2nd way:
UPDATE customers_likes
SET customer_name = 'No name'
WHERE EXISTS (SELECT customer_name FROM customers_likes WHERE customer_name = 'Hary');  -- nothing changed because 'Hary' doesn't exist in our database



-- Update all customer_name to 'No name' if the field has a name 'Lary'
-- 1st way:
UPDATE customers_likes
SET customer_name = 'No name'
WHERE customer_name = 'Mark';

-- 2nd way
UPDATE customers_likes
SET customer_name = 'No name'
WHERE EXISTS (SELECT customer_name FROM customers_likes WHERE customer_name = 'John');


-- Update all customer_name to 'Some name' if the liked_product field has 'Orange'
-- 1st way:
UPDATE customers_likes
SET customer_name = 'Some name'
WHERE liked_product = 'Orange';  --  updates secific data


-- 2nd way - with EXISTS operator
UPDATE customers_likes
SET customer_name = 'Another name'
WHERE EXISTS (SELECT liked_product FROM customers_likes WHERE liked_product  = 'Orange');

-- Update all customer_name to 'John Doe' if the liked_product field has 'Orange' or 'Pineapple' or 'Avacado'


UPDATE customers_likes
SET customer_name = 'John Doe'
WHERE EXISTS (SELECT liked_product
			 FROM customers_likes
			 WHERE liked_product = 'Orange' OR liked_product = 'Pineapple' OR liked_product = 'Avacado');


-- OR

UPDATE customers_likes
SET customer_name = 'John Doe'
WHERE EXISTS (SELECT customer_name FROM customers_likes WHERE liked_product IN('Orange', 'Pineapple','Avacado') );


/*
------ What's the difference?
-- If you want to update specific records in a table, DO NOT use EXISTS operator.
-- Because EXISTS operator works with a subquery. If that subquery returns true, EXISTS operator updates the WHOLE field.

-- It is COMMON for all!!

-- To update / delete specific records in a table, use traditional way like this:
UPDATE customers_likes
SET customer_name = 'Some name'
WHERE liked_product = 'Orange';

OR
use IN operator

*/


-- Delete all records if there's 'Cherries' in the liked_product field in the customers_likes table

-- 1st way:
DELETE
FROM customers_likes
WHERE liked_product = 'Cherries';


-- 2nd way: EXISTS operator
DELETE
FROM customers_likes
WHERE EXISTS (SELECT liked_product FROM customers_likes WHERE liked_product = 'Pineapple');

-- This will delete all records coz if subquery returns true, EXISTS condition will DELETE all records


SELECT * FROM customers_likes;

DROP TABLE customers_likes;


----------------------
CREATE TABLE customers_products1 (
  product_id INT,
  customer_name VARCHAR(30),
  product_name VARCHAR(30)
);

INSERT INTO customers_products1 VALUES (10, 'Mark Twain', 'Orange');
INSERT INTO customers_products1 VALUES (10, 'Mark Wilson', 'Mango');
INSERT INTO customers_products1 VALUES (20, 'John Clark', 'Apple, Orange, Mango');
INSERT INTO customers_products1 VALUES (30, 'Amy Williams', 'Plum');
INSERT INTO customers_products1 VALUES (20, 'Mark Donne', 'Apple');
INSERT INTO customers_products1 VALUES (10, 'Adam Smith', 'Orange');
INSERT INTO customers_products1 VALUES (40, 'John Evans', 'Apricot');
INSERT INTO customers_products1 VALUES (20, 'Eddie Murphy', 'Apple');
INSERT INTO customers_products1 VALUES (30, 'Anna Goldman', 'Mango, Apple, Orange');
INSERT INTO customers_products1 VALUES (50, 'Helen Green', 'Grapes');
INSERT INTO customers_products1 VALUES (10, 'Laura Owen', 'PineApple');

INSERT INTO customers_products1 VALUES (20, 'John Clark', 'Apple');
INSERT INTO customers_products1 VALUES (20, 'John Clark', 'Orange');
INSERT INTO customers_products1 VALUES (20, 'John Clark', 'Mango');



SELECT * FROM customers_products1;

SELECT *
FROM customers_products1
WHERE product_name = 'Apple, Orange, Mango';


-- Find the records that has the product_name 'Apple', 'Orange', 'Mango'

SELECT *
FROM customers_products1
WHERE product_name = 'Apple' AND product_name = 'Orange' AND product_name = 'Mango'  ;
/*

In this query, we're asking for rows where product_name is simultaneously equal to 'Apple', 'Orange', and 'Mango'.
Since a single row can only have one value for product_name, it's impossible for all these conditions to be true for any row.
Thus, our query returns no results.

*/

SELECT *
FROM customers_products1
WHERE customer_name = 'John Clark' AND product_name = 'Apple';


/*
In SQL, the AND operator is a logical operator that is used to combine multiple conditions in a WHERE clause.
When you use the AND operator, all conditions specified must evaluate to true for a row to be included in the result set.

customer_name = 'John Clark': This condition checks whether the customer_name column of a row equals 'John Clark'.

AND: This is the logical AND operator, which means both conditions on either side of it must be true for the row to be selected.

product_name = 'Apple': This condition checks whether the product_name column of a row equals 'Apple'.

So, the AND operator works by evaluating both conditions specified on either side of it.
If both conditions are true for a particular row in the customers_products1 table,
then that row will be included in the result set returned by the query.
If any one of the conditions is false for a row, that row will be excluded from the result set.

*/




