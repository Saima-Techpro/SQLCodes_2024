/*
In SQL, CTE stands for Common Table Expression. It is a temporary result set that you can refer to within a SELECT, INSERT, UPDATE, or DELETE statement. CTEs make your queries more readable and maintainable, especially when dealing with complex queries.

Syntax:

WITH cte_name (column1, column2, ...) AS (
    -- SQL query
)
SELECT * FROM cte_name;

Key Features:
Temporary Scope: A CTE exists only for the duration of the query in which it is defined.
Readability: It allows breaking down a complex query into simpler parts, making it easier to understand and debug.
Recursive Queries: You can use CTEs to perform recursive operations, such as traversing hierarchical data like trees or graphs.

*/


-- Step 1: Create the CityRoutes table
CREATE TABLE city_routes (
    routeID SERIAL PRIMARY KEY,
    start_point VARCHAR(50) NOT NULL,
    end_point VARCHAR(50) NOT NULL,
    distance DECIMAL(5, 2) NOT NULL,
    parent_routeID INT
);

-- Step 2: Insert sample data
INSERT INTO city_routes (start_point, end_point, distance, parent_routeID) VALUES
('Downtown', 'City Park', 5.0, NULL),
('City Park', 'Uptown', 12.0, 1),
('Downtown', 'Airport', 25.0, NULL),
('Uptown', 'Airport', 18.0, 2),
('City Park', 'Station A', 8.0, 1),
('Station A', 'Station B', 15.0, 5),
('Station B', 'Downtown', 20.0, 6);

SELECT * FROM city_routes;

-- Task 1: Simple CTE to Filter Data
-- Find all routes shorter than 10 km.

WITH short_routes AS (
    SELECT routeID, start_point, end_point, distance
    FROM city_routes
    WHERE distance < 10
)
SELECT * FROM short_routes;


-- Task 2:
-- Find routes starting from "Downtown" and routes ending at "Airport."


WITH DowntownToAirport AS (
    SELECT routeID, start_point, end_point, distance
    FROM city_routes
    WHERE start_point = 'Downtown' AND end_point = 'Airport'
)
SELECT * FROM DowntownToAirport;


-- OR use Multiple CTEs

WITH DowntownRoutes AS (
    SELECT routeID, start_point, end_point, distance
    FROM city_routes
    WHERE start_point = 'Downtown' AND end_point = 'Airport'
),
AirportRoutes AS (
    SELECT routeID, start_point, end_point, distance
    FROM city_routes
    WHERE start_point = 'Downtown' AND end_point = 'Airport'
)
SELECT * FROM DowntownRoutes
UNION
SELECT * FROM AirportRoutes;


-- Task 3: Using a CTE in UPDATE
-- Increase the distance of routes starting with "Park Street" by 10%.


WITH UpdateParkRoutes AS (
    SELECT routeID
    FROM city_routes
    WHERE start_point = 'City Park'
)
UPDATE city_routes
SET distance = distance * 1.10
WHERE routeID IN (SELECT routeID FROM UpdateParkRoutes);


-- Task 4: CTE with Aggregation
-- Calculate the total distance of all routes grouped by their starting points.


WITH RouteDistances AS (
    SELECT start_point, SUM(distance) AS TotalDistance
    FROM city_routes
    GROUP BY start_point
)
SELECT * FROM RouteDistances;


-- Task 5: Find Direct Connections
-- List all direct connections between routes (where one route’s endpoint matches another route’s starting point).

WITH DirectConnections AS (
    SELECT
        r1.routeID AS Route1, r1.start_point AS FromPoint, r1.end_point AS ToPoint,
        r2.routeID AS Route2, r2.start_point AS NextFromPoint, r2.end_point AS NextToPoint
    FROM city_routes r1
    INNER JOIN city_routes r2
    ON r1.end_point = r2.start_point
)
SELECT * FROM DirectConnections;




-------------------------------------------


/*
The CASE statement in SQL is a powerful conditional expression that allows you to implement logic directly in your queries. It’s often used to return specific values based on certain conditions, similar to if-else statements in programming.

Syntax of CASE:


CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    ...
    ELSE default_result
END

*/

-- Step 1: Create the table
CREATE TABLE student_grades (
    studentID INT,
    student_name VARCHAR(50),
    subject VARCHAR(50),
    marks INT,
    term INT
);

DROP TABLE student_grades;

-- Step 2: Insert sample data
INSERT INTO student_grades (studentID, student_name, subject, marks, term) VALUES
(1, 'Ali', 'Math', 85, 1),
(2, 'Fatih', 'Science', 60, 1),
(3, 'Veli', 'Math', 40, 1),
(4, 'Aygul', 'Comp. Sc.', 90, 1),
(5, 'Melissa', 'Comp. Sc.', 55, 1),
(6, 'Seher', 'Math', 99, 1),
(7, 'Mustafa', 'Science', 90, 1),
(8, 'Emily', 'Math', 35, 1),
(9, 'Omar', 'Comp. Sc', 78, 1),
(10, 'Anisa', 'Comp. Sc', 82, 1),
(11, 'Deniz', 'Science', 50, 1),
-- for term 2
(12, 'Ali', 'Math', 90, 2),
(13, 'Fatih', 'Science', 80, 2),
(14, 'Veli', 'Math', 70, 2),
(15, 'Aygul', 'Comp. Sc.', 70, 2),
(16, 'Melissa', 'Comp. Sc.', 75, 2),
(17, 'Seher', 'Math', 95, 2),
(18, 'Mustafa', 'Science', 70, 2),
(19, 'Emily', 'Math', 45, 2),
(20, 'Omar', 'Comp. Sc', 88, 2),
(21, 'Anisa', 'Comp. Sc', 62, 2),
(22, 'Deniz', 'Science', 70, 2);


-- Task 1: Classify Pass or Fail
-- Add a column that shows "Pass" if marks are 50 or above, otherwise "Fail."

SELECT student_name, subject, marks,
    CASE
        WHEN marks >= 50 THEN 'Pass'
        ELSE 'Fail'
    END AS Status
FROM student_grades;


-- Task 2: Grade Students
-- Assign grades based on marks:
-- A for marks ≥ 85,
-- B for 70–84,
-- C for 50–69,
-- D for marks < 50.

SELECT  student_name, subject, marks,
    CASE
        WHEN marks >= 85 THEN 'A'
        WHEN marks BETWEEN 70 AND 84 THEN 'B'
        WHEN marks BETWEEN 50 AND 69 THEN 'C'
        ELSE 'D'
    END AS Grade
FROM student_grades;

-- Task 3: Identify Top Performers
-- Show "Top Performer" for students scoring 90 or above; otherwise "Regular."

SELECT student_name, subject, marks,
    CASE
        WHEN marks >= 90 THEN 'Top Performer'
        ELSE 'Regular'
    END AS Performance
FROM student_grades;


-- Task 4: term-wise Classification
-- Display "First Half" for term 1 and "Second Half" for term 2.

SELECT
    student_name, subject, term,
    CASE
        WHEN term = 1 THEN 'First Half'
        WHEN term = 2 THEN 'Second Half'
    END AS TermPeriod
FROM student_grades;


-- Task 5: Filter Subjects
-- Display "Core" for Math and "Optional" for Science.


SELECT
    student_name, subject,
    CASE
        WHEN subject = 'Math' THEN 'Core'
        WHEN subject = 'Comp. Sc.' THEN 'Optional'
    END AS SubjectType
FROM student_grades;

-- Intermediate Tasks


-- Task 6: Custom Award Titles
-- Assign award titles:

-- Star Student for students with all subjects ≥ 85,
-- Achiever for at least one subject ≥ 85,
-- Needs Improvement otherwise.

SELECT
    student_name,
    CASE
        WHEN MIN(marks) >= 85 THEN 'Star Student'
        WHEN MAX(marks) >= 85 THEN 'Achiever'
        ELSE 'Needs Improvement'
    END AS Award
FROM student_grades
GROUP BY student_name;

-- Task 7: Analyze Subject Performance
-- Classify subjects based on average marks:

-- Good if the average marks ≥ 70,
-- Average if 50–69,
-- Poor for < 50.

WITH SubjectAverages AS (
    SELECT subject, ROUND(AVG(marks), 2 )AS AvgMarks
    FROM student_grades
    GROUP BY subject
)
SELECT subject, AvgMarks,
    CASE
        WHEN AvgMarks >= 70 THEN 'Good'
        WHEN AvgMarks BETWEEN 50 AND 69 THEN 'Average'
        ELSE 'Poor'
    END AS Performance
FROM SubjectAverages;





-- Task 8: Performance Trend
-- Compare marks in Math across semesters for each student:

-- Improved if Semester 2 marks > Semester 1 marks,
-- Declined if less,
-- Stable if equal.

WITH MathMarks AS (
    SELECT student_name, term, marks
    FROM student_grades
    WHERE subject = 'Math'
)
SELECT m1.student_name,
    CASE
        WHEN m2.marks > m1.marks THEN 'Improved'
        WHEN m2.marks < m1.marks THEN 'Declined'
        ELSE 'Stable'
    END AS Trend
FROM MathMarks m1
JOIN MathMarks m2
ON m1.student_name = m2.student_name AND m1.term = 1 AND m2.term = 2;


SELECT * FROM student_grades;




